// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: photoExhibition.proto

package photoExhibition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhotoExhibitionClient is the client API for PhotoExhibition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoExhibitionClient interface {
	CreatePhotoExhibition(ctx context.Context, in *CreatePhotoExhibitionReq, opts ...grpc.CallOption) (*CreatePhotoExhibitionRes, error)
	EditPhotoExhibition(ctx context.Context, in *EditPhotoExhibitionReq, opts ...grpc.CallOption) (*EditPhotoExhibitionRes, error)
	DelPhotoExhibition(ctx context.Context, in *DelPhotoExhibitionReq, opts ...grpc.CallOption) (*DelPhotoExhibitionRes, error)
	EditStatus(ctx context.Context, in *EditStatusReq, opts ...grpc.CallOption) (*EditStatusRes, error)
	PhotoExhibitionInfo(ctx context.Context, in *PhotoExhibitionInfoReq, opts ...grpc.CallOption) (*PhotoExhibitionInfoRes, error)
}

type photoExhibitionClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoExhibitionClient(cc grpc.ClientConnInterface) PhotoExhibitionClient {
	return &photoExhibitionClient{cc}
}

func (c *photoExhibitionClient) CreatePhotoExhibition(ctx context.Context, in *CreatePhotoExhibitionReq, opts ...grpc.CallOption) (*CreatePhotoExhibitionRes, error) {
	out := new(CreatePhotoExhibitionRes)
	err := c.cc.Invoke(ctx, "/photoExhibition.PhotoExhibition/CreatePhotoExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoExhibitionClient) EditPhotoExhibition(ctx context.Context, in *EditPhotoExhibitionReq, opts ...grpc.CallOption) (*EditPhotoExhibitionRes, error) {
	out := new(EditPhotoExhibitionRes)
	err := c.cc.Invoke(ctx, "/photoExhibition.PhotoExhibition/EditPhotoExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoExhibitionClient) DelPhotoExhibition(ctx context.Context, in *DelPhotoExhibitionReq, opts ...grpc.CallOption) (*DelPhotoExhibitionRes, error) {
	out := new(DelPhotoExhibitionRes)
	err := c.cc.Invoke(ctx, "/photoExhibition.PhotoExhibition/DelPhotoExhibition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoExhibitionClient) EditStatus(ctx context.Context, in *EditStatusReq, opts ...grpc.CallOption) (*EditStatusRes, error) {
	out := new(EditStatusRes)
	err := c.cc.Invoke(ctx, "/photoExhibition.PhotoExhibition/EditStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoExhibitionClient) PhotoExhibitionInfo(ctx context.Context, in *PhotoExhibitionInfoReq, opts ...grpc.CallOption) (*PhotoExhibitionInfoRes, error) {
	out := new(PhotoExhibitionInfoRes)
	err := c.cc.Invoke(ctx, "/photoExhibition.PhotoExhibition/PhotoExhibitionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoExhibitionServer is the server API for PhotoExhibition service.
// All implementations must embed UnimplementedPhotoExhibitionServer
// for forward compatibility
type PhotoExhibitionServer interface {
	CreatePhotoExhibition(context.Context, *CreatePhotoExhibitionReq) (*CreatePhotoExhibitionRes, error)
	EditPhotoExhibition(context.Context, *EditPhotoExhibitionReq) (*EditPhotoExhibitionRes, error)
	DelPhotoExhibition(context.Context, *DelPhotoExhibitionReq) (*DelPhotoExhibitionRes, error)
	EditStatus(context.Context, *EditStatusReq) (*EditStatusRes, error)
	PhotoExhibitionInfo(context.Context, *PhotoExhibitionInfoReq) (*PhotoExhibitionInfoRes, error)
	mustEmbedUnimplementedPhotoExhibitionServer()
}

// UnimplementedPhotoExhibitionServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoExhibitionServer struct {
}

func (UnimplementedPhotoExhibitionServer) CreatePhotoExhibition(context.Context, *CreatePhotoExhibitionReq) (*CreatePhotoExhibitionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhotoExhibition not implemented")
}
func (UnimplementedPhotoExhibitionServer) EditPhotoExhibition(context.Context, *EditPhotoExhibitionReq) (*EditPhotoExhibitionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPhotoExhibition not implemented")
}
func (UnimplementedPhotoExhibitionServer) DelPhotoExhibition(context.Context, *DelPhotoExhibitionReq) (*DelPhotoExhibitionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPhotoExhibition not implemented")
}
func (UnimplementedPhotoExhibitionServer) EditStatus(context.Context, *EditStatusReq) (*EditStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditStatus not implemented")
}
func (UnimplementedPhotoExhibitionServer) PhotoExhibitionInfo(context.Context, *PhotoExhibitionInfoReq) (*PhotoExhibitionInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotoExhibitionInfo not implemented")
}
func (UnimplementedPhotoExhibitionServer) mustEmbedUnimplementedPhotoExhibitionServer() {}

// UnsafePhotoExhibitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoExhibitionServer will
// result in compilation errors.
type UnsafePhotoExhibitionServer interface {
	mustEmbedUnimplementedPhotoExhibitionServer()
}

func RegisterPhotoExhibitionServer(s grpc.ServiceRegistrar, srv PhotoExhibitionServer) {
	s.RegisterService(&PhotoExhibition_ServiceDesc, srv)
}

func _PhotoExhibition_CreatePhotoExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhotoExhibitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoExhibitionServer).CreatePhotoExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photoExhibition.PhotoExhibition/CreatePhotoExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoExhibitionServer).CreatePhotoExhibition(ctx, req.(*CreatePhotoExhibitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoExhibition_EditPhotoExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPhotoExhibitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoExhibitionServer).EditPhotoExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photoExhibition.PhotoExhibition/EditPhotoExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoExhibitionServer).EditPhotoExhibition(ctx, req.(*EditPhotoExhibitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoExhibition_DelPhotoExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPhotoExhibitionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoExhibitionServer).DelPhotoExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photoExhibition.PhotoExhibition/DelPhotoExhibition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoExhibitionServer).DelPhotoExhibition(ctx, req.(*DelPhotoExhibitionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoExhibition_EditStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoExhibitionServer).EditStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photoExhibition.PhotoExhibition/EditStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoExhibitionServer).EditStatus(ctx, req.(*EditStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoExhibition_PhotoExhibitionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoExhibitionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoExhibitionServer).PhotoExhibitionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photoExhibition.PhotoExhibition/PhotoExhibitionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoExhibitionServer).PhotoExhibitionInfo(ctx, req.(*PhotoExhibitionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoExhibition_ServiceDesc is the grpc.ServiceDesc for PhotoExhibition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoExhibition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photoExhibition.PhotoExhibition",
	HandlerType: (*PhotoExhibitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePhotoExhibition",
			Handler:    _PhotoExhibition_CreatePhotoExhibition_Handler,
		},
		{
			MethodName: "EditPhotoExhibition",
			Handler:    _PhotoExhibition_EditPhotoExhibition_Handler,
		},
		{
			MethodName: "DelPhotoExhibition",
			Handler:    _PhotoExhibition_DelPhotoExhibition_Handler,
		},
		{
			MethodName: "EditStatus",
			Handler:    _PhotoExhibition_EditStatus_Handler,
		},
		{
			MethodName: "PhotoExhibitionInfo",
			Handler:    _PhotoExhibition_PhotoExhibitionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photoExhibition.proto",
}
